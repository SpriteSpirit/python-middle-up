Простые задачи:
1. Простая асинхронная функция.
Задача: Напишите асинхронную функцию, которая выводит "Hello, asyncio!" с задержкой в 1 секунду.
Пояснение: main() объединяет корутины, и они выполняются последовательно из-за await.

2. Запуск двух корутин подряд.
Задача: Напишите программу, которая последовательно выполняет две корутины, каждая из которых печатает сообщение
с задержкой в 1 секунду.

3. Параллельный запуск двух корутин
Задача: Запустите две корутины параллельно, каждая с задержкой 1 секунда, и выведите "Hello" и "World".
Пояснение: asyncio.gather позволяет запускать корутины параллельно, итоговое время ~1 секунда.

4. Передача аргументов в корутину
Задача: Напишите корутину, которая принимает имя и печатает приветствие с задержкой 1 секунда.
Пояснение: Корутины принимают аргументы как обычные функции.

5. Повторение действия с задержкой
Задача: Напишите корутину, которая печатает "Tick" 3 раза с задержкой 1 секунда между каждым выводом.
Пояснение: Цикл внутри корутины работает последовательно с задержками.

6. Измерение времени выполнения
Задача: Измерьте время выполнения двух параллельных корутин, каждая с задержкой 2 секунды.

7. Асинхронное ожидание с timeout
Задача: Напишите корутину, которая выполняется 3 секунды, но прерывается через 1 секунду.
Пояснение: asyncio.wait_for прерывает задачу, если она превышает заданное время.

8. Простая очередь с задачами
Задача: Используйте asyncio.Queue для передачи одного сообщения "Hello" и его вывода.
Пояснение: queue.put добавляет элемент, queue.get извлекает, а task_done и join управляют завершением.

9. Создание задачи вручную
Задача: Создайте задачу вручную с помощью create_task и выведите сообщение с задержкой 1 секунда.
Пояснение: create_task создает задачу, которая выполняется параллельно.

10. Отмена задачи
Задача: Создайте задачу с задержкой 5 секунд и отмените её через 1 секунду.
Пояснение: task.cancel() прерывает задачу, и CancelledError обрабатывает отмену.


Умеренно сложные задачи:
11. Параллельная обработка списка
Задача: Обработайте список чисел [1, 2, 3], печатая их с задержкой 1 секунда параллельно.
Пояснение: Генератор передается в gather через распаковку *.

12. Ограничение параллельных задач
Задача: Ограничьте выполнение 5 задач с задержкой 1 секунда до 2 параллельных с помощью семафора.
Пояснение: Semaphore(2) ограничивает до 2 активных задач одновременно.

13. Обработка исключений
Задача: Напишите корутину, которая выбрасывает исключение, и обработайте его в main.
Пояснение: Исключение обрабатывается стандартным try-except.

14. Очередь с несколькими воркерами
Задача: Создайте очередь с 3 числами и обработайте их 2 воркерами с задержкой 1 секунда.
Пояснение: Два воркера делят работу, завершаясь после опустошения очереди.

15. Асинхронное чтение файла
Задача: Асинхронно прочтите файл test.txt и выведите его строки с задержкой 0.5 секунды.
Пояснение: aiofiles позволяет читать файл асинхронно построчно.

16. Параллельные запросы с задержкой
Задача: Выполните 3 "запроса" с разными задержками (1, 2, 3 секунды) параллельно.
Пояснение: Все запросы запускаются одновременно, общее время ~3 секунды.

17. Ожидание первой завершившейся задачи
Задача: Запустите 3 задачи с задержками 1, 2, 3 секунды и выведите результат первой завершившейся.
Пояснение: asyncio.wait возвращает завершившиеся задачи, FIRST_COMPLETED останавливает ожидание после первой.

18. Последовательная обработка с условием
Задача: Обработайте список [1, 2, 3], печатая только четные числа с задержкой 1 секунда.
Пояснение: Обработка последовательная из-за for с await.

19. Семафор с обработкой ошибок
Задача: Запустите 5 задач с семафором на 2, одна из которых выбрасывает исключение.
Пояснение: return_exceptions=True позволяет собрать результаты, включая исключения.

20. Асинхронный генератор
Задача: Создайте асинхронный генератор, который выдает числа от 1 до 3 с задержкой 1 секунда.
Пояснение: async for позволяет итерироваться по асинхронному генератору.

Заключение:
Эти задачи охватывают основы asyncio: корутины, параллелизм с gather, управление задачами через create_task,
ограничение с помощью семафоров, очереди, обработку исключений, работу с файлами и асинхронные генераторы.
Практикуйтесь с каждым примером, изменяя параметры (например, задержки или количество задач), чтобы лучше
понять поведение асинхронного кода.